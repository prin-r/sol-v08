import pytest
from brownie import accounts, Bridge, BridgeData, MockBridge

# Returns the POA mainnet validator set
@pytest.fixture(scope="module")
def poa_validator_set():
    return [
        ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", "1000001"],
        ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", "1000001"],
        ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", "1000001"],
        ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", "1000001"],
    ]


# Returns a basic mock validator set
@pytest.fixture(scope="module")
def simple_validator_set():
    return [
        ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
        ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
        ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
        ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
    ]


# Returns a valid proof from the VRF oracle script
@pytest.fixture(scope="module")
def valid_proof():
    return

# Returns a vlid proof from the VRF oracle script
@pytest.fixture(scope="module")
def valid_count_proof():
    return

# Deploy Bridge contract with POA mainnet validator set
@pytest.fixture(scope="module")
def bridge(poa_validator_set):
    return accounts[0].deploy(Bridge, poa_validator_set)


# Deploy Bridge contract with simple validator set
@pytest.fixture(scope="function")
def simplebridge(simple_validator_set):
    return accounts[0].deploy(Bridge, simple_validator_set)


# Deploy MockBridge contract with simple validator set
@pytest.fixture(scope="module")
def mockbridge(simple_validator_set):
    return accounts[0].deploy(MockBridge, simple_validator_set)


# Deploy BridgeData contract
@pytest.fixture(scope="module")
def bridgeinfo(bridge):
    return accounts[0].deploy(BridgeData, bridge.address)


@pytest.fixture(scope="module")
def bridgeinfo_relayed(bridgeinfo, valid_proof):
    bridgeinfo.relayAndSave(valid_proof, {"from": accounts[0]})
    return bridgeinfo
