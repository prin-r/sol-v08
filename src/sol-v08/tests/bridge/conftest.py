import pytest
from brownie import accounts, Bridge, BridgeData, MockBridge

# Returns the POA mainnet validator set
@pytest.fixture(scope="module")
def poa_validator_set():
    return [
        ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", "1000001"],
        ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", "1000001"],
        ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", "1000001"],
        ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", "1000001"],
    ]


# Returns a basic mock validator set
@pytest.fixture(scope="module")
def simple_validator_set():
    return [
        ["0x652D89a66Eb4eA55366c45b1f9ACfc8e2179E1c5", 100],
        ["0x88e1cd00710495EEB93D4f522d16bC8B87Cb00FE", 100],
        ["0xaAA22E077492CbaD414098EBD98AA8dc1C7AE8D9", 100],
        ["0xB956589b6fC5523eeD0d9eEcfF06262Ce84ff260", 100],
    ]


# Returns a valid proof from the VRF oracle script
@pytest.fixture(scope="module")
def valid_proof():
    return

# Returns a vlid proof from the VRF oracle script
@pytest.fixture(scope="module")
def valid_count_proof():
    return "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000660000000000000000000000000000000000000000000000000000000000000060075C236506323653765775311C9A0370CFE8A30C80D894D4FBBFAA2B94817177AD3BC881551885DF743DDB73FF122E7BFF60596A5AB7A8E0CFC6A0E53BA9DE1CECFC997F04BA6771B7D2B1AD06A89CED14EC0B736C5298FCCFFC3777036FEF98A8332A3B22A636160CC9ED9B57865CE365697716D4891E4F546FCEECBF71788011EAFD3AB6CEB5303CC3BB766F25E997399F1A38E1072EE4DAA8E47D7049FE20B3F02642D9E70D5C1C493A4F732BFE9C9B95A4A42651703B816EDCFC8FADA53120000000000000000000000000000000000000000000000000000000000051F7E0000000000000000000000000000000000000000000000000000000060BF5D4D000000000000000000000000000000000000000000000000000000001E08F35EA563B6EC9B68E5A213B6C842C5C33D836B8F84392337D669BA8D078D8ADF727E6206F2FFDFBB93B83BD917B05B13CA59C12330268611242F5FD5734E673079159FB9C7533CAF1D218DA3AF6D277F6B101C42E3C3B75D784242DA663604DD53C28A153906A4AFDFBF3AEA3F0AA4C4002A7F1B9FB0970200F828C8799DF424B00C00000000000000000000000000000000000000000000000000000000000001C00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001A000000000000000000000000000000000000000000000000000000000000002E0F9A484B9B53A34A03D17245A0D32819939FD3A7AC874113C9853449FDF7AC5E20E45C6AEC370D693F9CD99DBEDDC2156E93AE56D0C892B09FA1CB410A4F76139000000000000000000000000000000000000000000000000000000000000001C00000000000000000000000000000000000000000000000000000000000000A000000000000000000000000000000000000000000000000000000000000000E000000000000000000000000000000000000000000000000000000000000000106E0802117E1F05000000000022480A2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003F122408011220DD201AD7FEC2FCDDCEF3FF2862A3EEA35DFCDFECCE081D492C1C5AFAECE1B7B82A0C08CFBAFD850610B4D389AB01320962616E64636861696E002F787381B9B2CD736CF46EA3B08EA1C7187690168E7CCF2EECEBFFAC81C359AB4F8B8CEC90B96946DD1B1D103B7E91693E44DAEFEF8E23FA0F9A144F99ACD676000000000000000000000000000000000000000000000000000000000000001B00000000000000000000000000000000000000000000000000000000000000A000000000000000000000000000000000000000000000000000000000000000E000000000000000000000000000000000000000000000000000000000000000106E0802117E1F05000000000022480A2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003F122408011220DD201AD7FEC2FCDDCEF3FF2862A3EEA35DFCDFECCE081D492C1C5AFAECE1B7B82A0C08CFBAFD850610DADF8DAB01320962616E64636861696E0093626CEA9DCAA61B861F64D3568240C6C4A075064FBFF54E66D5A7F1F126C4F10B5D2C6CF40693D84F03E90D9942B5818FE7FD979B77BC41BED5B963C8D2E585000000000000000000000000000000000000000000000000000000000000001B00000000000000000000000000000000000000000000000000000000000000A000000000000000000000000000000000000000000000000000000000000000E000000000000000000000000000000000000000000000000000000000000000106E0802117E1F05000000000022480A2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003F122408011220DD201AD7FEC2FCDDCEF3FF2862A3EEA35DFCDFECCE081D492C1C5AFAECE1B7B82A0C08CFBAFD85061082DDB0A801320962616E64636861696E0000000000000000000000000000000000000000000000000000000000000003C00000000000000000000000000000000000000000000000000000000000051F7E0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000988F000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000051F7D027DBF32A6049857E32F9AAE014FBBD2F64F63D7960D53B22C15B9D12EABC4340000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000051F7D2050E8C634813206790D59B6C7A47432304509CC6E78D1854192AA3895662D460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000051F7DDBA3A429AB0A568451ADE913871925CD0BCC300367992D6B4BE5BBFF74E5475200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000D0000000000000000000000000000000000000000000000000000000000051F7D462A6B932BDFE922B07629358A6082F72C7D89B9ACD5642312FE1F9897B163440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000051F7D8832FCF4675CDCB76905763B7C9AD725F681ED55F57105D1A26D994469B336EE"

# Deploy Bridge contract with POA mainnet validator set
@pytest.fixture(scope="module")
def bridge(poa_validator_set):
    return accounts[0].deploy(Bridge, poa_validator_set)


# Deploy Bridge contract with simple validator set
@pytest.fixture(scope="function")
def simplebridge(simple_validator_set):
    return accounts[0].deploy(Bridge, simple_validator_set)


# Deploy MockBridge contract with simple validator set
@pytest.fixture(scope="module")
def mockbridge(simple_validator_set):
    return accounts[0].deploy(MockBridge, simple_validator_set)


# Deploy BridgeData contract
@pytest.fixture(scope="module")
def bridgeinfo(bridge):
    return accounts[0].deploy(BridgeData, bridge.address)


@pytest.fixture(scope="module")
def bridgeinfo_relayed(bridgeinfo, valid_proof):
    bridgeinfo.relayAndSave(valid_proof, {"from": accounts[0]})
    return bridgeinfo
